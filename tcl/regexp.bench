#
# RCS: @(#) $Id$
#

# Literal regular expresion 
proc regexp-1.1 {string} {
    regexp "^abc(.*)jkl(.*)" $string
}

# Variable based regexp
proc regexp-str-exp {string exp} {
    regexp $exp $string
}

# Static regexp
proc regexp-str-static {string} {
    regexp "bcd" $string
}

# Static left anchor regexp
proc regexp-str-static-lanchor {string} {
    regexp "^foo" $string
}

# Static right anchor regexp
proc regexp-str-static-ranchor {string} {
    regexp {bar$} $string
}

# Static anchored regexp
proc regexp-str-static-anchor {string} {
    regexp {^foobar$} $string
}

# Static anchored regexp
proc regexp-str-static-anchor-dot {string} {
    regexp {^fo.bar$} $string
}

# Variable based regexp with catching
proc regexp-catch {string exp} {
    if {[regexp $exp $string match one two three]} {
	list $match $one $two $three
    }
}

if { [catch {regexp -all "abc" "abc"}] } {
    proc regexp-count {string exp} {
	set len [string len $string]
	set ind 0
	set count 0
	while { $ind < $len } {
	    if { [regexp -indices $exp \
		    [string range $string $ind end] res] } {
		set start [lindex $res 0]
		set end [lindex $res 1]
		if { $end < $start } {
		    set end $start
		}
		set ind [expr {$end + 1 + $ind}]
		incr count
	    }
	}
	set count
    }
    proc regexp-extract {string exp} {
	set len [string len $string]
	set ind 0
	set result {}
	while { $ind < $len } {
	    if { [regexp -indices $exp \
		    [string range $string $ind end] res] } {
		set start [lindex $res 0]
		set end [lindex $res 1]
		if { $end < $start } {
		    set end $start
		}
		lappend result [string range $string \
			[expr {$start + $ind}] [expr {$end + $ind}]]
		set ind [expr {$end + 1 + $ind}]
	    }
	}
	set result
    }
} else {
    proc regexp-count {string exp} {
	regexp -all $exp $string
    }
    proc regexp-extract {string exp} {
	regexp -all -inline $exp $string
    }
}

if { [catch {string repeat "abc" 10}] } {
    proc str-repeat {str num} {
	set val {}
	for {set i 0} {$i < $num} {incr i} {
	    append val $str
	}
	set val
    }
} else {
    proc str-repeat {str num} {
	string repeat $str $num
    }
}

set string "abcdefghijklmnopqrstuvwxyz"
set exp "^abc(.*)jkl(.*)"
bench -desc "RE literal regexp" -body {regexp-1.1 $string}
bench -desc "RE var-based regexp" -body {regexp-str-exp $string $exp}
bench -desc "RE count all matches" \
	-body {regexp-count "abcabcabcabcabcabc" "abc"}
bench -desc "RE extract all matches" \
	-body {regexp-extract "abcabcabcabcabcabc" "abc"}

# See bug 1452969
set inifile "choices=[str-repeat mx 1000]"
bench -desc "RE ini file" -iters 30 \
    -body {regexp-catch $inifile {^(.*)=(.*)$}}
if {[info tclversion] > 8.0} {
    bench -desc "RE ini file ng" -iters 100 \
	-body {regexp-catch $inifile {^(.*?)=(.*)$}}
}

set cCommentUnopt {/\*([^*]|\*+[^/*])*\*+/}
set cCommentOpt   {/\*[^*]*\*+([^/*][^*]*\*+)*/}
set 1char "(c)"
set nchar "(b+)"

set tests [list \
	"1-char short" $1char "abcdef" \
	"1-char long-start" $1char "abc[str-repeat a 1000]" \
	"1-char long-middle" $1char "[str-repeat a 500]c[str-repeat a 500]" \
	"1-char long-end" $1char "[str-repeat a 1000]cba" \
	"n-char short" $nchar "abbbbbcdef" \
	"n-char long-start" $nchar "a[str-repeat b 20][str-repeat a 1000]" \
	"n-char long-middle" $nchar "[str-repeat a 500][str-repeat b 20][str-repeat a 500]" \
	"n-char long-end" $nchar "[str-repeat a 1000]c[str-repeat b 20]a" \
	"basic" {^([^ ]*)[ ]*([^ ]*)} "" \
	"c-comment simple" $cCommentOpt "/* foo * x * y * z * a * b * c */" \
	"c-comment nomatch" $cCommentOpt "there aren't any comments here" \
	"c-comment long" $cCommentOpt "/* [str-repeat a 1000] */" \
	"c-comment long pmatch" $cCommentOpt "/* [str-repeat a 2000] [str-repeat * 100]" \
	"c-comment long nomatch" $cCommentOpt "[str-repeat a 2000]" \
	"c-comment many *s" $cCommentOpt "/* [str-repeat a 2000] [str-repeat * 100]/" \
	]

foreach {type re str} $tests {
    bench -desc "RE $type" \
	    -body {regexp-str-exp $str $re}
}
foreach {type re str} $tests {
    bench -desc "RE $type catching" \
	    -body {regexp-catch $str $re}
}

set numstr "[str-repeat a 50]123.50[str-repeat b 20]"
set tests [list \
	"***= directive match" "***=a" "[str-repeat foo 100]"\
	". match" "." "[str-repeat foo 100]"\
	"^\$ nomatch" {^$} "[str-repeat foo 100]"\
	"***= directive nomatch" "***=bar" "[str-repeat foo 100]"\
	"backtrack case" "a.*b.*c" "a[str-repeat b 200]" \
	{[0-9] match} {[0-9]+\.[0-9]+} $numstr \
	{\d match} {\d+\.\d+} $numstr \
	]
foreach {type re str} $tests {
    if {([info tclversion] < 8.1) && ([string first ***= $re] == 0)} {
	# limited REs pre-8.1
	continue
    }
    bench -desc "RE var $type" \
	    -body {regexp-str-exp $str $re}
}

bench -desc "RE static short match" \
	-body {regexp-str-static "abcdef"}
bench -desc "RE static short nomatch" \
	-body {regexp-str-static "ghijkl"}
set str "[str-repeat a 500][str-repeat b 20]c[str-repeat d 500]"
bench -desc "RE static long match" \
	-body {regexp-str-static $str}
set str "[str-repeat a 500][str-repeat b 20]cc[str-repeat d 500]"
bench -desc "RE static long nomatch" \
	-body {regexp-str-static $str}

bench -desc "RE static anchored match" \
	-body {regexp-str-static-anchor "foobar"} -result 1
bench -desc "RE static anchored nomatch" \
	-body {regexp-str-static-anchor "goodbye"} -result 0
bench -desc "RE static anchored match dot" \
	-body {regexp-str-static-anchor-dot "foobar"} -result 1
bench -desc "RE static anchored nomatch dot" \
	-body {regexp-str-static-anchor-dot "goodbye"} -result 0
bench -desc "RE static l-anchored match" \
	-body {regexp-str-static-lanchor "foobar"} -result 1
bench -desc "RE static l-anchored nomatch" \
	-body {regexp-str-static-lanchor "goodbye"} -result 0
bench -desc "RE static r-anchored match" \
	-body {regexp-str-static-ranchor "foobar"} -result 1
bench -desc "RE static r-anchored nomatch" \
	-body {regexp-str-static-ranchor "goodbye"} -result 0
