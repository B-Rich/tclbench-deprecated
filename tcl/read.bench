# Read a file using gets
proc read-gets {filename {trans {}}} {
    set fp [open $filename r]
    if {[string compare $trans {}] && ([info tclversion] > 8.0)} {
	fconfigure $fp -translation $trans
    }
    while {[gets $fp line] != -1} {
	set x $line
    }
    close $fp
}

# Read a file using gets and check line-by-line for a search term
proc read-gets-match {filename term {trans {}}} {
    set fp [open $filename r]
    if {[string compare $trans {}] && ([info tclversion] > 8.0)} {
	fconfigure $fp -translation $trans
    }
    while {[gets $fp line] != -1} {
	if {[string match $term $line]} {
	    set x $line
	}
    }
    close $fp
}

# Read a file using read only
proc read-read {filename {trans {}}} {
    set fp [open $filename r]
    if {[string compare $trans {}] && ([info tclversion] > 8.0)} {
	fconfigure $fp -translation $trans
    }
    set x [read $fp]
    close $fp
}

proc read-cat {file {trans {}}} {
    global tcl_platform
    set f [open $file r]
    if {$tcl_platform(platform) == "windows"} {
	set outf [open NUL: w]
    } else {
	set outf [open /dev/null w]
    }
    if {[string compare $trans {}] && ([info tclversion] > 8.0)} {
	fconfigure $f -translation $trans
	fconfigure $outf -translation $trans -buffering full
    }
    set buf ""
    while {[gets $f buf] >= 0} { puts $outf $buf }
    close $f
}

# Read a file using read and [file size]
proc read-read-size {filename {trans {}}} {
    set fp [open $filename r]
    if {[string compare $trans {}] && ([info tclversion] > 8.0)} {
	fconfigure $fp -translation $trans
    }
    set x [read $fp [file size $filename]]
    close $fp
}

# Read a file using read only, and a small buffersize
proc read-read-10 {filename {trans {}}} {
    set fp [open $filename r]
    fconfigure $fp -buffersize 10
    if {[string compare $trans {}] && ([info tclversion] > 8.0)} {
	fconfigure $fp -translation $trans
    }
    set x [read $fp]
    close $fp
}

# Read a file using read only, and a dynamically changing buffersize
proc read-read-dyn {filename {trans {}}} {
    set fp [open $filename r]
    fconfigure $fp -buffersize 10
    if {[string compare $trans {}] && ([info tclversion] > 8.0)} {
	fconfigure $fp -translation $trans
    }
    read $fp 2
    fconfigure $fp -buffersize 4096
    set x [read $fp]
    close $fp
}

if {[info tclversion] < 8.3} {
    # XXX - these send 8.0 into an endless loop, and 8.2 crashes on them.
    proc read-read-10 {args} { return -code 666 "8.3+" }
    proc read-read-dyn {args} { return -code 666 "8.3+" }
}

proc makeFiles {largeFile smallFile} {
    # 60 chars
    set line "012345678901234567890123456789012345678901234567890123456789"

    set largeFid [open $largeFile w]
    # 60 * 10000 = 595K
    for {set i 0} {$i < 10000} {incr i} {
	puts $largeFid $line
    }
    close $largeFid

    set smallFid [open $smallFile w]
    # 60 * 50 = <3K
    for {set i 0} {$i < 50} {incr i} {
	puts $smallFid $line
    }
    close $smallFid
}

set largeFile [bench_tmpfile].lrg
set smallFile [bench_tmpfile].sml
makeFiles $largeFile $smallFile
set large "[expr {[file size $largeFile]/1024}]K"
set small "[file size $smallFile]b"

foreach {fsize fname iters} [list $large $largeFile 35 $small $smallFile 70] {
    foreach {trans desc} {binary { bin} {} {}} {
	set desc "READ$desc $fsize,"
	bench -iter $iters -desc "$desc cat" \
	    -body [list read-cat $fname $trans]
	bench -iter $iters -desc "$desc gets" \
	    -body [list read-gets $fname $trans]
	bench -iter $iters -desc "$desc read" \
	    -body [list read-read $fname $trans]
	bench -iter $iters -desc "$desc read & size" \
	    -body [list read-read-size $fname $trans]
	bench -iter $iters -desc "$desc read small buf" \
	    -body [list read-read-10 $fname $trans]
	bench -iter $iters -desc "$desc read dyn buf" \
	    -body [list read-read-dyn $fname $trans]
	bench -iter $iters -desc "$desc glob-grep match" \
	    -body [list read-gets-match $fname "*0123456789*" $trans]
	bench -iter $iters -desc "$desc glob-grep nomatch" \
	    -body [list read-gets-match $fname "*nomatchterm*" $trans]
    }
}

bench_rm $largeFile $smallFile
