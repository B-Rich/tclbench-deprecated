# Read a file using gets
proc read-gets {filename {trans {}}} {
    set fp [open $filename r]
    if {[string compare $trans {}] && ([info tclversion] > 8.1)} {
	fconfigure $fp -translation $trans
    }
    while {[gets $fp line] != -1} {}
    close $fp
}

# Read a file using read only
proc read-read {filename {trans {}}} {
    set fp [open $filename r]
    if {[string compare $trans {}] && ([info tclversion] > 8.1)} {
	fconfigure $fp -translation $trans
    }
    read $fp
    close $fp
}

# Read a file using read and [file size]
proc read-read-size {filename {trans {}}} {
    set fp [open $filename r]
    if {[string compare $trans {}] && ([info tclversion] > 8.1)} {
	fconfigure $fp -translation $trans
    }
    read $fp [file size $filename]
    close $fp
}


# Read a file using read only, and a small buffersize
proc read-read-10 {filename {trans {}}} {
    set fp [open $filename r]
    fconfigure $fp -buffersize 10
    if {[string compare $trans {}] && ([info tclversion] > 8.1)} {
	fconfigure $fp -translation $trans
    }
    read $fp
    close $fp
}

# Read a file using read only, and a dynamically changing buffersize
proc read-read-dyn {filename {trans {}}} {
    set fp [open $filename r]
    fconfigure $fp -buffersize 10
    if {[string compare $trans {}] && ([info tclversion] > 8.1)} {
	fconfigure $fp -translation $trans
    }
    read $fp 2
    fconfigure $fp -buffersize 4096
    read $fp
    close $fp
}


proc makeFiles {largeFile smallFile} {
    # 60 chars
    set line "012345678901234567890123456789012345678901234567890123456789"

    set largeFid [open $largeFile w]
    # 60 * 10000 = 595K
    for {set i 0} {$i < 10000} {incr i} {
	puts $largeFid $line
    }
    close $largeFid

    set smallFid [open $smallFile w]
    # 60 * 50 = <3K
    for {set i 0} {$i < 50} {incr i} {
	puts $smallFid $line
    }
    close $smallFid
}

set largeFile [bench_tmpfile].lrg
set smallFile [bench_tmpfile].sml
makeFiles $largeFile $smallFile
set large "[expr {[file size $largeFile]/1024}]K"
set small "[file size $smallFile]b"

set iters 30
bench -iter $iters -desc "READ $large, gets" \
	-body {read-gets $largeFile}
bench -iter $iters -desc "READ $large, read" \
	-body {read-read $largeFile}
bench -iter $iters -desc "READ $large, read & size" \
	-body {read-read-size $largeFile}
bench -iter $iters -desc "READ $small, gets" \
	-body {read-gets $smallFile}
bench -iter $iters -desc "READ $small, read" \
	-body {read-read $smallFile}
bench -iter $iters -desc "READ $small, read & size" \
	-body {read-read-size $smallFile}
bench -iter $iters -desc "READ bin $large, gets" \
	-body {read-gets $largeFile binary}
bench -iter $iters -desc "READ bin $large, read" \
	-body {read-read $largeFile binary}
bench -iter $iters -desc "READ bin $large, read & size" \
	-body {read-read-size $largeFile binary}
bench -iter $iters -desc "READ bin $small, gets" \
	-body {read-gets $smallFile binary}
bench -iter $iters -desc "READ bin $small, read" \
	-body {read-read $smallFile binary}
bench -iter $iters -desc "READ bin $small, read & size" \
	-body {read-read-size $smallFile binary}

# New benchmarks, affect of buffersize on timing

bench -iter $iters -desc "READ $large, read & small buffer" \
	-body {read-read-10 $largeFile}
bench -iter $iters -desc "READ $small, read & small buffer" \
	-body {read-read-10 $smallFile}
bench -iter $iters -desc "READ bin $large, read & small buffer" \
	-body {read-read-10 $largeFile binary}
bench -iter $iters -desc "READ bin $small, read & small buffer" \
	-body {read-read-10 $smallFile binary}

bench -iter $iters -desc "READ $large, read & dyn buffer" \
	-body {read-read-dyn $largeFile}
bench -iter $iters -desc "READ $small, read & dyn buffer" \
	-body {read-read-dyn $smallFile}
bench -iter $iters -desc "READ bin $large, read & dyn buffer" \
	-body {read-read-dyn $largeFile binary}
bench -iter $iters -desc "READ bin $small, read & dyn buffer" \
	-body {read-read-dyn $smallFile binary}


bench_rm $largeFile $smallFile
