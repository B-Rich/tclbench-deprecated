2001-05-31  Jeff Hobbs  <jeffh@ActiveState.com>

	* tcl/conditional.bench: added switch/if comparison bench.

	* tcl/base64.bench: new benchmark with base64 code (from tcllib).

	* tcl/md5.bench: new benchmark with Libes' md5 (from tcllib).

	* tcl/sha1.bench: new benchmark with a couple of pure tcl sha1
	routines (Libes and Fellows).

2001-05-29  Andreas Kupries  <andreas_kupries@users.sourceforge.net>

	* doc/libbench.n:
	* doc/runbench.1:
	* doc/normbench.1: Added documentation of benchmark library and
	  applications.

	* doc: Added documentation directory.

2001-05-22  Jeff Hobbs  <jeffh@ActiveState.com>

	* runbench.tcl: corrected error for reporting errors in sourced files

	* tcl/fcopy.bench: made use of bench_tmpfile for more accurate
	data (not skewed by network).

	* libbench.tcl (bench_tmpfile): correctly allow multiple calls to
	bench_tmpfile within one file.

	* normbench.tcl: new file that allows for post-process
	normalization of the benchmark data.
	Corrected last minute code checkin bug.
	Added support for moving left (to higher versions) to normalize
	when the requested version returned non-double data.

	* tcl/libbench.tcl:
	* tcl/runbench.tcl: changed -iterations to be a maximum number for
	timings, to override any larger number the benchmark may set for
	itself.
	Rearranged result format of benchmarks to return data by benchmark
	description.  Benchmarks are now always returned in alphabetical
	order of the benchmark description.
	Changed benchmarks to rerun the interpreter per benchmark file
	instead of sourcing all files into the same interpreter.  This
	reduces any skew related to excessive mem usage or other factors
	that may arise for one benchmark file.
	Changed midpoint numbers to time elapsed calculation.
	Added -normalize option that post-processes the time information
	to normalize against one version as a baseline.
	Changed -errors <bool> to -throwerrors with no arg, and changed
	the default to not throw errors in benchmark files.
	Added version string to verbose run info.

	* tcl/klist.bench: added support for <8.0 to all benchmarks except
	shuffle0, with notably reduced default run iters due to extreme
	slowness of <8.0 interps for these tasks.

	* tcl/string.bench:
	* tcl/regexp.bench: fixed incorrect str-repeat replacement function

2001-05-18  Jeff Hobbs  <jeffh@ActiveState.com>

	* tcl/string.bench: added <8.0 compatible rev-recursive benchmark,
	fixed non-octal escape in ustring instantiation.

	* tcl/wordcount.bench: added <8.1 compatible benchmarks

	* tcl/methods.bench: return for interps <8.0

2001-05-19  Andreas Kupries  <andreas_kupries@users.sourceforge.net>

	* tcl/conditional.bench: Changed some descriptions to make them
	  unique and matching to the code.

	* tcl/fcopy.bench: New benchmarks for the [fcopy] command
	  (unsupported0 in older versions of the core).

2001-05-16  Jeff Hobbs  <jeffh@ActiveState.com>

	* tcl/string.bench: added static string length benchmarks

	* tcl/wordcount.in: 
	* tcl/wordcount.bench: wordcount benchmarks

	* tcl/heapsort.bench: new file with heapsort benchmark
	* tcl/string.bench:
	* tcl/matrix.bench:
	* tcl/regexp.bench: extended benchmarks

2001-05-11  Jeff Hobbs  <jeffh@ActiveState.com>

	* tcl/string.bench: clarified string reverse benchmarks, added
	more to the string compare benchmarks.

	* tcl/matrix.bench: some new matrix benchmarks.  Basically a seed
	file looking for more.  procs courtesy Sofer.

	* tcl/list.bench: added a list-iter benchmark

	* tcl/klist.bench: reduced default iters in klist.bench.  Accuracy
	seems about the same without the wait...

	* libbench.tcl: 
	* runbench.tcl: added support for -rmatch option (regexp match of
	benchmark description).
	Added MIDPOINT verbose puts for interim time notes.

2001-04-11  Jeff Hobbs  <jeffh@ActiveState.com>

	* tcl/klist.bench: added shuffle5* from wiki.

2001-03-28  Jeff Hobbs  <jeffh@activestate.com>

	* tcl/string.bench: fixed str-first proc that had bogus code in it.
	added more split benchmarks for dkf's split improvement in 8.4.
	
	* tk/canvas.bench: expanded item draw benchmarks

2001-03-23    <jeffh@activestate.com>

	* tk/canvas.bench: added simple item draw benchmarks

2001-03-15    <jeffh@activestate.com>

	* tcl/klist.bench: improved non-tclbench data output.

	* runbench.tcl: added more error capturing.

	* tcl/string.bench: fixed calls to string repeat to work with
	<8.1.1 interps.

	* tcl/klist.bench: new file to benchmark various list shuffling
	techniques (from wiki).
	* tcl/methods.bench: new file to benchmark various method
	invocation speeds (petasis).

2000-10-19  Jeff Hobbs  <hobbs@ajubasolutions.com>

	* tcl/string.bench (str-append-2): added more append tests

2000-08-30  Jeff Hobbs  <hobbs@scriptics.com>

	* tcl/string.bench: made string repeat calls compatible with
	pre-8.1.1 interpreters.

	* libbench.tcl (bench_tmpfile): add env to global list

2000-08-29  Eric Melski  <ericm@ajubasolutions.com>

	* tcl/string.bench: Extended string append benchmarks to exploit
	new growth algorithm for string objects in Tcl 8.4a2.

2000-05-31  Jeff Hobbs  <hobbs@scriptics.com>

	* runbench.tcl: new options -errors (passed to libbench), -verbose
	(by default we are now quieter on output), -output <text|list|csv>
	(different output types - csv is char-sep-value for Excel).
	Added start/finish times (in -verbose mode).
	* libbench.tcl: libbench now takes -option switches for
	flexibility, options for -errors BOOL (error suppression), -interp
	NAME (to specify interp), -match PATTERN (glob pattern to filter
	tests by desc), -iters NUM (default number of iters to run).
	Reorganized how data is returned to runbench master.

	* tk/entry.bench (new):
	* tk/canvas.bench (new): new tests for widget creation, config

	* tcl/array.bench (removed):
	* tcl/vars.bench: merged array.bench tests into VAR

	* tcl/map.bench: fixed for compatability with Tcl7.4-

2000-05-25  Jeff Hobbs  <hobbs@scriptics.com>

	* runbench.tcl: added -match, -notcl, -notk options, restructured
	startup sequence.

	* libbench.tcl: added ability to return string values from bench
	tests and support for filtering tests to run.

	* tcl/string.bench: moved string mapping benchmarks and added more
	string equality benchmarks
	* tcl/map.bench: added extended string mapping benchmark

	* tcl/read.bench:
	* tcl/startup.bench:
	* tk/startup.bench: updated code to reflect proc-oriented tmpfile
	operations.
